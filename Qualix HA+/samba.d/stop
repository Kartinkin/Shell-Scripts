#!/usr/xpg4/bin/sh
# Version	2.1q
# Date		09 Aug 2000
# Author	Kirill Kartinkin

# Программа для перевода кластерного сервиса, представленного программой
# Samba, из состояния SERVE в состояния STANDBY или OFFLINE.
#
# Программу требуется запускать от имени пользователя root.
#
# Внимание! Данная программа работает только совместно с Qualix и только в
# рамках группы сервисов.
#
# Программа посылает сигнал TERM демонам smbd и nmbd, если они
# не остаовились, добивает их KILL.
#
# Параметры:
#	нет
#
# Возвращаемые значения:
#	0	O.K.
#	0	Демоны остановить не удалось, процессы убиты
#	100	Программу запустили не так
#	101	Ошибка подключения вспомогательных файлов
#

# Если эти переменные не описаны, значит нас запустили "руками"
if [[ -z ${TOPDIR} || -z ${SGNAME} || -z ${SVCNAME} ]]
then
	# Ошибка, переменные не описаны
	exit 100
fi

################################################################################
# Описываем переменные конфигурации и производим необходимые проверки

# Переменная TOPDIR задает месторасположение Qualix HA+,
# например, /etc/opt/QUALha.
# Переменная SGNAME содержит имя сервисной группы
# Переменная SVCNAME содержит имя сервиса
 
# Устанавливаем необходимые пути поиска
PATH=/sbin:/usr/sbin:/usr/xpg4/bin:/usr/bin:/var/adm/bin

# Извлекаем из командной строки имя программы
Name=${SGNAME}.${SVCNAME}.${0##*/}

# Внимание! Для работы программы необходимы следующие файлы:
set -A FilesToSource \
	${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/environment \
	/var/adm/bin/logger.sh
	
# В файле /${SGDir}/${SVCNAME}.d/environment содержатся
# переменные окружения для пакета.
#	PIDsFile
#	SGFacility
#
# Файле /var/adm/bin/logger.sh содержит функцию Logger
# Следующие переменные необходимы для описания этой функции.
# При описании используем одинарные кавычки, чтобы передать имя переменной
# окружения, а не ее значение.
LOGGER_FACILITY=${SGFacility}
LOGGER_TAG=${SGNAME}

# Добавляем указанные выше файлы
for File in ${FilesToSource[*]}
do
	if [[ -f ${File} ]]
	then
		. ${File}
	else
		print "${Name}:\tERROR: Unnable to source ${File}"
		exit 101
	fi
done

################################################################################
################################################################################
# Останавливаем Samba
	
# Считываем список pid'ов процессов, созданный для нас при старте.
set -A MonitorProcessesPIDs $(cat ${PIDsFile})

# Останавливаем СУБД
Logger info "Stopping Samba..."
kill ${MonitorProcessesPIDs[*]}

################################################################################
# Начинаем следить за завершением процессов

# Переменная задает период мониторинга (в секундах)
integer moi=5
# Счетчик циклов мониторинга
integer TimeoutCounter
# Вычисляем общее число циклов
(( TimeoutCounter = Timeout / moi ))
while (( ${TimeoutCounter} != 0 ))
do
	# В теле цикла просматриваем список процессов и,
	# если какой-нибудь завершился,
	# выкидываем его из списка
		
	# Ждем чуть-чуть
	sleep ${moi}
	# Удаляем пустые элементы массива
	set -A MonitorProcessesPIDs ${MonitorProcessesPIDs[*]}
	# Переменная p пробегает по списку pid'ов,
	# а переменная pp хранит номер текущего
	integer pp=0
	for p in ${MonitorProcessesPIDs[*]}
	do
		# Есть ли такой процесс?
		kill -0 $p >/dev/null 2>&1
		if (( $? != 0 ))
		then
			# Процесса не найдено
			Logger debug "Process ${p} has stopped."
			# Удаляем его pid из списка
			unset MonitorProcessesPIDs[$pp]
		fi
		(( pp = pp + 1 ))
	done

	if [[ -z ${MonitorProcessesPIDs[*]} ]]
	then
		# Массив пустой, все процессы завершились
		# Выходим из программы
		Logger info "Samba stopped."
		exit 0
	fi

	(( TimeoutCounter = TimeoutCounter - 1 ))
done

################################################################################
# Время ожидания истекло, а процессы не умерли.
# Убиваем их

# Для начала сохраним список процессов
ps -el
	
# Убиваем всех по очереди 
for p in ${MonitorProcessesPIDs[*]}
do
	# Цикл по всем процессам
	# Сначала посылаем сигнал TERM.
	kill $p >/dev/null 2>&1
	if (( $? = 0 ))
	then
		sleep 3
		# Сигнал, конечно, послан,
		# но процесс, скорее всего, его не обработает.
		# Поэтому добиваем его сигналом KILL.
		kill -9 $p >/dev/null 2>&1
		if (( $? = 0 ))
		then
			Logger notice \
				"${Name} sent SIGKILL to process ${p}."
		fi
	else
		# Оказывается этого процесса уже нет
		Logger debug \
			"Process ${p} has stopped."
	fi
done

Logger notice "Samba killed."
exit 0
