#!/usr/xpg4/bin/sh
# Version	2.3q
# Date		19 Dec 2001
# Author	Kirill Kartinkin

# Программа для проверки работоспособности кластерного сервиса,
# представленного СУБД Oracle.
#
# Работа программы гарантирована с СУБД версий выше 7.3.x.
#
# Программу требуется запускать от имени пользователя root.
#
# Внимание! Данная программа работает только совместно с Qualix и только в
# рамках группы сервисов.
#
# Параметры:
#	нет
#
# Возвращаемые значения:
#	0	O.K.
#	1	Нет SGA
#	2	Одного из процессов СУБД Oracle нет
#	3	Не удается подсоединиться к БД
#	101	Ошибка подключения вспомогательных файлов

# Если эти переменные не описаны, значит нас запустили "руками"
if [[ -z ${TOPDIR} || -z ${SGNAME} || -z ${SVCNAME} ]]
then
	# Ошибка, переменные не описаны
	exit 100
fi

################################################################################
# Описываем переменные конфигурации и производим необходимые проверки

# Устанавливаем необходимые пути поиска
PATH=/sbin:/usr/sbin:/usr/xpg4/bin:/usr/bin:/var/adm/bin

# Строим расширенное имя программы
Name=${SGNAME}.${SVCNAME}.${0##*/}

# Внимание! Для работы программы необходимы следующие файлы:
set -A FilesToSource \
	${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/environment \
	'~${OracleUser}/.${SVCNAME}.environment' \
	${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/configure \
	/var/adm/bin/logger.sh
	
# В файле ${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/environment содержатся
# основные настроечные параметры пакета.
#	ShutdownTimeOut
#	AbortTimeOut
#	OracleUser
#	TestPIDs
#	TestStatement
#	TestUser
#	SGFacility
#
# В файле ~${OracleUser}/.${SVCNAME}.environment содержатся все необходимые
# администратору СУБД переменные окружения.
#	ORACLE_HOME
#	ORACLE_SID
#	PATH=${ORACLE_HOME}/bin:${PATH}
#	и прочие
#
# В файле ${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/configure содержатся
# переменные окружения для пакета.
#	DevDir
#	PIDsFile
#	MonitorProcess
#	ProcessName
#	PFile
#	SGA
#	OracleMgrl
#	SQLPlus
#
# Файле /var/adm/bin/logger.sh содержит функцию Logger
# Следующие переменные необходимы для описания этой функции.
# При описании используем одинарные кавычки, чтобы передать имя переменной
# окружения, а не ее значение.
LOGGER_FACILITY='${SGFacility}'
LOGGER_TAG=${SGNAME}

# Добавляем указанные выше файлы
for File in ${FilesToSource[*]}
do
	eval File=${File}
	eval File=${File}
	if [[ -f ${File} ]]
	then
		. ${File}
	else
		print "${Name}:\tERROR: Unnable to source ${File}"
		exit 101
	fi
done

################################################################################
################################################################################
# Проверяем работу СУБД Oracle
# Сначала смотрим все ли процессы работают, потом пробуем соединение.

# Проверяем наличие SGA
#if [[ ! -f ${SGAdbf} ]]
#then
#	Logger err "System Global Area for Oracle is not OK."
#	exit 1
#fi

#if [[ -f /tmp/${SGNAME}.${SVCNAME}.off-line.backup ]]
#then
#        Logger debug "Off-line backup is in progress."
#        exit 0
#fi

if [[ ${TestPIDs} == "yes" ]]
then
	# Проходим по всем процессам.
	# Их список создан для нас при старте.
	integer i=0
	for pid in $(cat ${PIDsFile})
	do
		# В теле цикла проверяется наличие в системе процесса
		kill -0 ${pid} >/dev/null 2>&1
		if (( $? != 0 ))
		then
			# Процесса не обнаружено
			Logger err "${ProcessName[$i]} (${pid}) for Oracle is not running!"
			# Сохраняем список процессов
			ps -fu ${OracleUser}
			exit 2
		fi
		(( i = i + 1 ))
	done
else
	# Переменная p содержит имя процесса, а i пробегает по элементам массива.
	integer i=0
	for p in ${MonitorProcess[*]}
	do
		if [[ -z $(ps -fu ${OracleUser} | awk -v Proc=$p 'Proc==$NF { print $2 }' ) ]]
		then
			# Процесса не обнаружено
			Logger err "${ProcessName[$i]} ($p) for Oracle is not running!"
			# Сохраняем список процессов
			ps -fu ${OracleUser}
			exit 2
		fi			
		(( i = i + 1 ))
	done
fi

TempFile=/tmp/${SGNAME}.${SVCNAME}.temp.$$

# Поскольку мы уже загрузили настройки пользователя oracle,
# делаем su без "-"
if [[ -n ${TestString} && -n ${TestUser} ]]
then
	# Поскольку мы уже загрузили настройки пользователя oracle,
	# делаем su без "-"
	Out=$(print "${TestStatement}\nexit;" | \
		su ${OracleUser} -c "${SQLPlus} ${TestUser} 2>${TempFile}")

	if [[ -z $(print "${Out}" | grep "${TestString}" 2>/dev/null) ]]
	then
		print "${Out}"
		cat ${TempFile}
		rm -f ${TempFile} >/dev/null 2>&1
		Logger err "Cannot connect to Oracle. Database not opened."

		Out=$(print "connect internal;\nselect sysdate from dual;\nexit;" | \
			su ${OracleUser} -c "${OracleMgrl} 2>${TempFile}")

		if [[ -z $(print "${Out}" | grep SYSDATE 2>/dev/null) ]]
		then
			print "${Out}"
			cat ${TempFile}
			rm -f ${TempFile} >/dev/null 2>&1
			Logger err "Database mounted, but not opened."
			exit 3
		fi
		Logger err "Database not mounted."
		rm -f ${TempFile} >/dev/null 2>&1
		exit 3
	fi
else
	Out=$(print "connect internal;\nselect sysdate from dual;\nexit;" | \
		su ${OracleUser} -c "${OracleMgrl} 2>${TempFile}")

	if [[ -z $(print "${Out}" | grep SYSDATE 2>/dev/null) ]]
	then
		print "${Out}"
		cat ${TempFile}
		rm -f ${TempFile} >/dev/null 2>&1
		Logger err "Cannot connect to Oracle."
		exit 3
	fi
	rm -f ${TempFile} >/dev/null 2>&1
fi

exit 0
