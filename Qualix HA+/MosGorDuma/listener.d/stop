#!/usr/xpg4/bin/sh
# Version	2.1q
# Date		09 Aug 2000
# Author	Kirill Kartinkin

# Программа для перевода кластерного сервиса, представленного
# демоном listener к СУБД Oracle, из состояния SERVE
# в состояния STANDBY или OFFLINE.
#
# Работа программы гарантирована с СУБД версий выше 7.3.x.
#
# Программу требуется запускать от имени пользователя root.
#
# Внимание! Данная программа работает только совместно с Qualix и только в
# рамках группы сервисов.
#
# Программа пытается остановить СУБД командой 'shutdown immediate',
# в случае неудачи отдает команду 'shutdown abort' и,
# если это не помогло, убивает оставшиеся процессы.
#
# Параметры:
#	нет
#
# Возвращаемые значения:
#	0	O.K.
#	0	Listener остановить не удалось, процессы убиты
#	100	Программу запустили не так
#	101	Ошибка подключения вспомогательных файлов

# Если эти переменные не описаны, значит нас запустили "руками"
# Переменная TOPDIR задает месторасположение Qualix HA+,
# например, /etc/opt/QUALha.
# Переменная SGNAME содержит имя сервисной группы
# Переменная SVCNAME содержит имя сервиса
if [[ -z ${TOPDIR} || -z ${SGNAME} || -z ${SVCNAME} ]]
then
	# Ошибка, переменные не описаны
	exit 100
fi

################################################################################
# Описываем переменные конфигурации и производим необходимые проверки

# Устанавливаем необходимые пути поиска
PATH=/sbin:/usr/sbin:/usr/xpg4/bin:/usr/bin:/var/adm/bin

# Строим расширенное имя программы
Name=${SGNAME}.${SVCNAME}.${0##*/}

# Внимание! Для работы программы необходимы следующие файлы:
set -A FilesToSource \
	${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/environment \
	'~${OracleUser}/.${SGNAME}.environment' \
	${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/configure \
	/var/adm/bin/logger.sh
	
# В файле ${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/environment содержатся
# основные настроечные параметры пакета.
#	ShutdownTimeOut
#	OracleUser
#	TestStatement
#	TestString
#	TestUser
#	SGFacility
#	ListenerName
#
# В файле ~${OracleUser}/.${SGNAME}.environment содержатся все необходимые
# администратору СУБД переменные окружения.
#	ORACLE_HOME
#	ORACLE_SID
#	PATH=${ORACLE_HOME}/bin:${PATH}
#	и прочие
#
# В файле ${TOPDIR}/sg/${SGNAME}/${SVCNAME}.d/configure содержатся
# переменные окружения для пакета.
#	DevDir
#	PIDsFile
#	MonitorProcess
#	ConfFile
#	ListenerCtl
#
# Файле /var/adm/bin/logger.sh содержит функцию Logger
# Следующие переменные необходимы для описания этой функции.
# При описании используем одинарные кавычки, чтобы передать имя переменной
# окружения, а не ее значение.
LOGGER_FACILITY='${SGFacility}'
LOGGER_TAG=${SGNAME}

# Добавляем указанные выше файлы
for File in ${FilesToSource[*]}
do
	eval File=${File}
	eval File=${File}
	if [[ -f ${File} ]]
	then
		. ${File}
	else
		print "${Name}:\tERROR: Unnable to source ${File}"
		exit 101
	fi
done

################################################################################
################################################################################
# Останавливаем listener

Logger info "Shuting down Listener..."

# Поскольку мы уже загрузили настройки пользователя oracle,
# делаем su без "-"
# Имеем возможность следить за процессом останова, так как
# запускаем его в фоновом режиме 
( print "stop ${ListenerName}\nexit" | \
	su ${OracleUser} -c "${ListenerCtl}"
if (( $? != 0 ))
then
	ShutdownErr=$?
	Logger err "Listener '${ListenerName}' shutdown failed!"
else
	Logger info "Listener '${ListenerName}' shuted down!"
fi )&
ShutdownPID=$!

# Начинаем следить за завершением процесса

# Считываем список pid'ов процессов, созданный для нас при старте.
set -A MonitorProcessesPIDs $(cat ${PIDsFile})

# Переменная задает период мониторинга (в секундах)
integer moi=5
# Счетчик циклов мониторинга
# Вычисляем общее число циклов
(( TimeoutCounter = ShutdownTimeOut / moi ))
while (( ${TimeoutCounter} != 0 ))
do
	# В теле цикла просматриваем список процессов и,
	# если какой-нибудь завершился,
	# выкидываем его из списка

	# Ждем чуть-чуть
	sleep ${moi}
	# Удаляем пустые элементы массива
	set -A MonitorProcessesPIDs ${MonitorProcessesPIDs[*]}
	# Переменная p пробегает по списку pid'ов,
	# а переменная pp хранит номер текущего
	integer pp=0
	for p in ${MonitorProcessesPIDs[*]}
	do
		# Есть ли такой процесс?
		kill -0 $p >/dev/null 2>&1
		if (( $? != 0 ))
		then
			# Процесса не найдено
			Logger debug "Listener process (${p}) process has stopped."
			# Удаляем его pid из списка
			unset MonitorProcessesPIDs[$pp]
		fi
		(( pp = pp + 1 ))
	done

	if [[ -z ${MonitorProcessesPIDs[*]} ]]
	then
		# Массив пустой, все процессы завершились
		# Можно выходить, но сначала дождемся
		# завершения команды 'stop'
		wait
		exit
	fi
	(( TimeoutCounter = TimeoutCounter - 1 ))
done

# Время ожидания истекло, а процессы не умерли.
# Убиваем их

# Для начала сохраним список процессов
ps -ef

# Убиваем всех по очереди 
for p in ${MonitorProcessesPIDs[*]}
do
	# Цикл по всем процессам.
	# Сначала посылаем сигнал TERM.
	kill $p >/dev/null 2>&1
	if (( $? == 0 ))
	then
		sleep 5
		# Сигнал, конечно, послан,
		# но процесс, скорее всего, его не обработает.
		# Поэтому добиваем его сигналом KILL.
		kill -9 $p >/dev/null 2>&1
		if (( $? == 0 ))
		then
			Logger notice \
				"${Name} sent SIGKILL to process ${p}."
		fi
	else
		# Оказывается этого процесса уже нет
		Logger debug "(${p}) process has stopped."
	fi
done

# Все процессы убили, пришел черед запущенной раннее команды останова
kill -9 ${ShutdownPID}
# Возвращаем ошибку
exit 0
