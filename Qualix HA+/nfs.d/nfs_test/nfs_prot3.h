/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NFS_PROT3_H_RPCGEN
#define	_NFS_PROT3_H_RPCGEN

#include <rpc/rpc.h>
#define	NFS_PORT 2049
#define	NFS_MAXDATA 8192
#define	NFS_MAXPATHLEN 1024
#define	NFS_MAXNAMLEN 255
#define	NFS_FHSIZE 32
#define	NFS_COOKIESIZE 4
#define	NFS_FIFO_DEV -1
#define	NFSMODE_FMT 0170000
#define	NFSMODE_DIR 0040000
#define	NFSMODE_CHR 0020000
#define	NFSMODE_BLK 0060000
#define	NFSMODE_REG 0100000
#define	NFSMODE_LNK 0120000
#define	NFSMODE_SOCK 0140000
#define	NFSMODE_FIFO 0010000

enum nfsstat {
	NFS_OK = 0,
	NFSERR_PERM = 1,
	NFSERR_NOENT = 2,
	NFSERR_IO = 5,
	NFSERR_NXIO = 6,
	NFSERR_ACCES = 13,
	NFSERR_EXIST = 17,
	NFSERR_NODEV = 19,
	NFSERR_NOTDIR = 20,
	NFSERR_ISDIR = 21,
	NFSERR_FBIG = 27,
	NFSERR_NOSPC = 28,
	NFSERR_ROFS = 30,
	NFSERR_NAMETOOLONG = 63,
	NFSERR_NOTEMPTY = 66,
	NFSERR_DQUOT = 69,
	NFSERR_STALE = 70,
	NFSERR_WFLUSH = 99
};
typedef enum nfsstat nfsstat;

enum ftype {
	NFNON = 0,
	NFREG = 1,
	NFDIR = 2,
	NFBLK = 3,
	NFCHR = 4,
	NFLNK = 5,
	NFSOCK = 6,
	NFBAD = 7,
	NFFIFO = 8
};
typedef enum ftype ftype;

struct nfs_fh {
	char data[NFS_FHSIZE];
};
typedef struct nfs_fh nfs_fh;

struct nfstime {
	u_int seconds;
	u_int useconds;
};
typedef struct nfstime nfstime;

struct fattr {
	ftype type;
	u_int mode;
	u_int nlink;
	u_int uid;
	u_int gid;
	u_int size;
	u_int blocksize;
	u_int rdev;
	u_int blocks;
	u_int fsid;
	u_int fileid;
	nfstime atime;
	nfstime mtime;
	nfstime ctime;
};
typedef struct fattr fattr;

struct sattr {
	u_int mode;
	u_int uid;
	u_int gid;
	u_int size;
	nfstime atime;
	nfstime mtime;
};
typedef struct sattr sattr;

typedef char *filename;

typedef char *nfspath;

struct attrstat {
	nfsstat status;
	union {
		fattr attributes;
	} attrstat_u;
};
typedef struct attrstat attrstat;

struct sattrargs {
	nfs_fh file;
	sattr attributes;
};
typedef struct sattrargs sattrargs;

struct diropargs {
	nfs_fh dir;
	filename name;
};
typedef struct diropargs diropargs;

struct diropokres {
	nfs_fh file;
	fattr attributes;
};
typedef struct diropokres diropokres;

struct diropres {
	nfsstat status;
	union {
		diropokres diropres;
	} diropres_u;
};
typedef struct diropres diropres;

struct readlinkres {
	nfsstat status;
	union {
		nfspath data;
	} readlinkres_u;
};
typedef struct readlinkres readlinkres;

struct readargs {
	nfs_fh file;
	u_int offset;
	u_int count;
	u_int totalcount;
};
typedef struct readargs readargs;

struct readokres {
	fattr attributes;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct readokres readokres;

struct readres {
	nfsstat status;
	union {
		readokres reply;
	} readres_u;
};
typedef struct readres readres;

struct writeargs {
	nfs_fh file;
	u_int beginoffset;
	u_int offset;
	u_int totalcount;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct writeargs writeargs;

struct createargs {
	diropargs where;
	sattr attributes;
};
typedef struct createargs createargs;

struct renameargs {
	diropargs from;
	diropargs to;
};
typedef struct renameargs renameargs;

struct linkargs {
	nfs_fh from;
	diropargs to;
};
typedef struct linkargs linkargs;

struct symlinkargs {
	diropargs from;
	nfspath to;
	sattr attributes;
};
typedef struct symlinkargs symlinkargs;

typedef char nfscookie[NFS_COOKIESIZE];

struct readdirargs {
	nfs_fh dir;
	nfscookie cookie;
	u_int count;
};
typedef struct readdirargs readdirargs;

struct entry {
	u_int fileid;
	filename name;
	nfscookie cookie;
	struct entry *nextentry;
};
typedef struct entry entry;

struct dirlist {
	entry *entries;
	bool_t eof;
};
typedef struct dirlist dirlist;

struct readdirres {
	nfsstat status;
	union {
		dirlist reply;
	} readdirres_u;
};
typedef struct readdirres readdirres;

struct statfsokres {
	u_int tsize;
	u_int bsize;
	u_int blocks;
	u_int bfree;
	u_int bavail;
};
typedef struct statfsokres statfsokres;

struct statfsres {
	nfsstat status;
	union {
		statfsokres reply;
	} statfsres_u;
};
typedef struct statfsres statfsres;
#define	FS3_FHSIZE 64
#define	NFS3_FHSIZE 64

struct nfs_fh3 {
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct nfs_fh3 nfs_fh3;

enum ftype3 {
	NF3REG = 1,
	NF3DIR = 2,
	NF3BLK = 3,
	NF3CHR = 4,
	NF3LNK = 5,
	NF3SOCK = 6,
	NF3FIFO = 7
};
typedef enum ftype3 ftype3;

typedef u_long uint32;

typedef u_longlong_t uint64;

typedef uint32 mode3;

typedef uint32 uid3;

typedef uint32 gid3;

typedef uint64 size3;

struct specdata3 {
	uint32 specdata1;
	uint32 specdata2;
};
typedef struct specdata3 specdata3;

typedef uint64 fileid3;

struct nfstime3 {
	uint32 seconds;
	uint32 nseconds;
};
typedef struct nfstime3 nfstime3;

struct fattr3 {
	ftype3 type;
	mode3 mode;
	uint32 nlink;
	uid3 uid;
	gid3 gid;
	size3 size;
	size3 used;
	specdata3 rdev;
	uint64 fsid;
	fileid3 fileid;
	nfstime3 atime;
	nfstime3 mtime;
	nfstime3 ctime;
};
typedef struct fattr3 fattr3;

struct GETATTR3args {
	nfs_fh3 object;
};
typedef struct GETATTR3args GETATTR3args;

struct GETATTR3resok {
	fattr3 obj_attributes;
};
typedef struct GETATTR3resok GETATTR3resok;

enum nfsstat3 {
	NFS3_OK = 0,
	NFS3ERR_PERM = 1,
	NFS3ERR_NOENT = 2,
	NFS3ERR_IO = 5,
	NFS3ERR_NXIO = 6,
	NFS3ERR_ACCES = 13,
	NFS3ERR_EXIST = 17,
	NFS3ERR_XDEV = 18,
	NFS3ERR_NODEV = 19,
	NFS3ERR_NOTDIR = 20,
	NFS3ERR_ISDIR = 21,
	NFS3ERR_INVAL = 22,
	NFS3ERR_FBIG = 27,
	NFS3ERR_NOSPC = 28,
	NFS3ERR_ROFS = 30,
	NFS3ERR_MLINK = 31,
	NFS3ERR_NAMETOOLONG = 63,
	NFS3ERR_NOTEMPTY = 66,
	NFS3ERR_DQUOT = 69,
	NFS3ERR_STALE = 70,
	NFS3ERR_REMOTE = 71,
	NFS3ERR_BADHANDLE = 10001,
	NFS3ERR_NOT_SYNC = 10002,
	NFS3ERR_BAD_COOKIE = 10003,
	NFS3ERR_NOTSUPP = 10004,
	NFS3ERR_TOOSMALL = 10005,
	NFS3ERR_SERVERFAULT = 10006,
	NFS3ERR_BADTYPE = 10007,
	NFS3ERR_JUKEBOX = 10008
};
typedef enum nfsstat3 nfsstat3;

struct GETATTR3res {
	nfsstat3 status;
	union {
		GETATTR3resok resok;
	} GETATTR3res_u;
};
typedef struct GETATTR3res GETATTR3res;

#define	NFS_PROGRAM ((unsigned long)(100003))
#define	NFS_VERSION ((unsigned long)(2))
#define	NFSPROC_NULL ((unsigned long)(0))
extern  void * nfsproc_null_2();
#define	NFSPROC_GETATTR ((unsigned long)(1))
extern  attrstat * nfsproc_getattr_2();
#define	NFSPROC_SETATTR ((unsigned long)(2))
extern  attrstat * nfsproc_setattr_2();
#define	NFSPROC_ROOT ((unsigned long)(3))
extern  void * nfsproc_root_2();
#define	NFSPROC_LOOKUP ((unsigned long)(4))
extern  diropres * nfsproc_lookup_2();
#define	NFSPROC_READLINK ((unsigned long)(5))
extern  readlinkres * nfsproc_readlink_2();
#define	NFSPROC_READ ((unsigned long)(6))
extern  readres * nfsproc_read_2();
#define	NFSPROC_WRITECACHE ((unsigned long)(7))
extern  void * nfsproc_writecache_2();
#define	NFSPROC_WRITE ((unsigned long)(8))
extern  attrstat * nfsproc_write_2();
#define	NFSPROC_CREATE ((unsigned long)(9))
extern  diropres * nfsproc_create_2();
#define	NFSPROC_REMOVE ((unsigned long)(10))
extern  nfsstat * nfsproc_remove_2();
#define	NFSPROC_RENAME ((unsigned long)(11))
extern  nfsstat * nfsproc_rename_2();
#define	NFSPROC_LINK ((unsigned long)(12))
extern  nfsstat * nfsproc_link_2();
#define	NFSPROC_SYMLINK ((unsigned long)(13))
extern  nfsstat * nfsproc_symlink_2();
#define	NFSPROC_MKDIR ((unsigned long)(14))
extern  diropres * nfsproc_mkdir_2();
#define	NFSPROC_RMDIR ((unsigned long)(15))
extern  nfsstat * nfsproc_rmdir_2();
#define	NFSPROC_READDIR ((unsigned long)(16))
extern  readdirres * nfsproc_readdir_2();
#define	NFSPROC_STATFS ((unsigned long)(17))
extern  statfsres * nfsproc_statfs_2();
extern int nfs_program_2_freeresult();
#define	NFS_V3 ((unsigned long)(3))
#define	NFSPROC3_NULL ((unsigned long)(0))
extern  void * nfsproc3_null_3();
#define	NFSPROC3_GETATTR ((unsigned long)(1))
extern  GETATTR3res * nfsproc3_getattr_3();
extern int nfs_program_3_freeresult();

/* the xdr functions */
extern bool_t xdr_nfsstat();
extern bool_t xdr_ftype();
extern bool_t xdr_nfs_fh();
extern bool_t xdr_nfstime();
extern bool_t xdr_fattr();
extern bool_t xdr_sattr();
extern bool_t xdr_filename();
extern bool_t xdr_nfspath();
extern bool_t xdr_attrstat();
extern bool_t xdr_sattrargs();
extern bool_t xdr_diropargs();
extern bool_t xdr_diropokres();
extern bool_t xdr_diropres();
extern bool_t xdr_readlinkres();
extern bool_t xdr_readargs();
extern bool_t xdr_readokres();
extern bool_t xdr_readres();
extern bool_t xdr_writeargs();
extern bool_t xdr_createargs();
extern bool_t xdr_renameargs();
extern bool_t xdr_linkargs();
extern bool_t xdr_symlinkargs();
extern bool_t xdr_nfscookie();
extern bool_t xdr_readdirargs();
extern bool_t xdr_entry();
extern bool_t xdr_dirlist();
extern bool_t xdr_readdirres();
extern bool_t xdr_statfsokres();
extern bool_t xdr_statfsres();
extern bool_t xdr_nfs_fh3();
extern bool_t xdr_ftype3();
extern bool_t xdr_uint32();
extern bool_t xdr_uint64();
extern bool_t xdr_mode3();
extern bool_t xdr_uid3();
extern bool_t xdr_gid3();
extern bool_t xdr_size3();
extern bool_t xdr_specdata3();
extern bool_t xdr_fileid3();
extern bool_t xdr_nfstime3();
extern bool_t xdr_fattr3();
extern bool_t xdr_GETATTR3args();
extern bool_t xdr_GETATTR3resok();
extern bool_t xdr_nfsstat3();
extern bool_t xdr_GETATTR3res();

#endif /* !_NFS_PROT3_H_RPCGEN */
